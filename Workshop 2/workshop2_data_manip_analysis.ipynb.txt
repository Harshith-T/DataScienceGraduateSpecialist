{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.4"
    },
    "colab": {
      "name": "workshop2_data_manip_analysis.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lDXKkk8GIyb-",
        "colab_type": "text"
      },
      "source": [
        "## Introduction"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Q_TEcEsIIycA",
        "colab_type": "text"
      },
      "source": [
        "In this workshop, we'll explore the NumPy and pandas libraries for data analysis. NumPy is a scientific computing library often used for its fast array-based operations, and pandas is a data analysis library commonly used for manipulation/analysis of tabular (e.g. CSV-formatted) data."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "In4GNOaGIycC",
        "colab_type": "text"
      },
      "source": [
        "## NumPy Arrays (ndarrays)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5Wb8VXgkIycE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 1\n",
        "\n",
        "import numpy as np"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fcpoJ7OTIycK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 2\n",
        "\n",
        "arr = np.array([1,3,5,7])\n",
        "arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B-PdEb_FIycO",
        "colab_type": "text"
      },
      "source": [
        "Why ndarrays?\n",
        "- efficient vectorized, elementwise operations for homogeneous data (sometimes orders of magnitude faster than in \"pure Python\")\n",
        "- provides foundation for operations in **pandas**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hxQjOS2zu24_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "a4e25a8b-6ded-426f-a2fb-87c9a566ca3e"
      },
      "source": [
        "## Comparision of timing\n",
        "import time\n",
        "import numpy as np\n",
        "\n",
        "size_of_vec = 1000\n",
        "\n",
        "def pure_python_version():\n",
        "    t1 = time.time()\n",
        "    X = range(size_of_vec)\n",
        "    Y = range(size_of_vec)\n",
        "    Z = [X[i] + Y[i] for i in range(len(X)) ]\n",
        "    return time.time() - t1\n",
        "\n",
        "def numpy_version():\n",
        "    t1 = time.time()\n",
        "    X = np.arange(size_of_vec)\n",
        "    Y = np.arange(size_of_vec)\n",
        "    Z = X + Y\n",
        "    return time.time() - t1\n",
        "\n",
        "\n",
        "t1 = pure_python_version()\n",
        "t2 = numpy_version()\n",
        "print(t1, t2)\n",
        "print(\"Numpy is in this example \" + str(t1/t2) + \" faster!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.0002675056457519531 0.0007452964782714844\n",
            "Numpy is in this example 0.35892514395393477 faster!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gJ_cOhmLIycP",
        "colab_type": "text"
      },
      "source": [
        "### Creating an ndarray"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gxZ9n-75IycR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 3\n",
        "# We already saw this\n",
        "\n",
        "np.array([1,3,5,7])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NDTDIMzVIycV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 4\n",
        "# Similar to range() function used in for loops and other places\n",
        "\n",
        "np.arange(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KJm6R4dMIycY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 5\n",
        "# Random numbers sampled from Gaussian distribution, mean = 0 and variance = 1\n",
        "# Using different mean/variance: https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.random.randn.html\n",
        "\n",
        "np.random.randn(5)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C_fKIavjIycd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 6\n",
        "# 2-D version\n",
        "\n",
        "np.random.randn(5,2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eI7kKHGHIych",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 7\n",
        "# All ones\n",
        "\n",
        "np.ones(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TH3bjMB9Iycm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 8\n",
        "# All zeros\n",
        "\n",
        "np.zeros(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7AbWi3ILLKQ-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from google.colab import files\n",
        "files.upload()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r8hPZ9cvIycr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 9\n",
        "# From a text file\n",
        "\n",
        "\n",
        "my_arr = np.loadtxt('loadarray.txt')\n",
        "my_arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jVqn3LjDIycv",
        "colab_type": "text"
      },
      "source": [
        "### Investigating an ndarray"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p1vy6kh8Iycw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 10\n",
        "# Number of dimensions\n",
        "\n",
        "my_arr.ndim"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cer5G2sLIycz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 11\n",
        "# Shape\n",
        "\n",
        "my_arr.shape"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cCnhk5njIyc3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 12\n",
        "# Data type\n",
        "\n",
        "my_arr.dtype"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iepd6gC1Iyc7",
        "colab_type": "text"
      },
      "source": [
        "### Casting from one dtype to another"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6nSLfJp6Iyc8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 13\n",
        "# Let's get a copy of my_arr as an integer array\n",
        "\n",
        "my_intarr = my_arr.astype(int)\n",
        "my_intarr\n",
        "#rounded_arr = np.rint(my_arr)    # numbers rounded instead of truncated (uncomment this and the next line to run code)\n",
        "#rounded_arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EMelRvR2IydA",
        "colab_type": "text"
      },
      "source": [
        "Similarly, you can cast an array from/into a float or string."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ieVxLkzkIydC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 14\n",
        "\n",
        "years = np.array(['2000','1999','2003','1998','1999','2004'])\n",
        "years.astype(int)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-lVsbey3IydG",
        "colab_type": "text"
      },
      "source": [
        "### Indexing and slicing"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gBqlyuN0IydH",
        "colab_type": "text"
      },
      "source": [
        "For 1D arrays, slicing and indexing are similar to corresponding operations on lists."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7faa9aFVIydI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 15\n",
        "\n",
        "sales = np.array([20, 30, 31, 33, 33, 35, 40, 410, 410, 45])\n",
        "sales[7:9]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Z-v9KoWpIydL",
        "colab_type": "text"
      },
      "source": [
        "However, if a scalar value is assigned to a slice, the value is broadcasted to the original array"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "49y2bmLPIydM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 16\n",
        "\n",
        "sales_slice = sales[7:9]\n",
        "sales_slice[:] = 41\n",
        "sales"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PHU9V-SOIydT",
        "colab_type": "text"
      },
      "source": [
        "What if we have a 2D array?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4pxOsQ1ZIydV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 17\n",
        "\n",
        "my_arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dbvBzvm6IydY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 18\n",
        "\n",
        "my_arr[0,1]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k2mTcTPiIydd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 19\n",
        "\n",
        "my_arr[:2, 0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_qyXOObTIydh",
        "colab_type": "text"
      },
      "source": [
        "For a 2D array, the concept of axis0 vs. axis1 is something you'll want to be familiar with, especially once we move into pandas. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kH3lL5CNIydi",
        "colab_type": "text"
      },
      "source": [
        "### Mathematical and statistical operations, functions, and methods"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FYmXRyGlIydk",
        "colab_type": "text"
      },
      "source": [
        "Remember, *elementwise* operations."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JiZAe1AwIydm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 20\n",
        "\n",
        "arr1 = np.arange(10)\n",
        "arr2 = arr1 + 2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WCM0KbovIydp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 21\n",
        "\n",
        "arr1"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rZ2tejErIydt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 22\n",
        "\n",
        "arr2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "joDSo7ytIydw",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 23\n",
        "\n",
        "arr1 + arr2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8biIuIT6Iyd0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 24\n",
        "\n",
        "arr2 * arr2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vjo641tMIyd7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 25\n",
        "\n",
        "arr2 ** 0.5"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3CFCM1MAIyeC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 26\n",
        "\n",
        "1/arr2"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fyoz5u7OIyeH",
        "colab_type": "text"
      },
      "source": [
        "**Universal functions, or ufuncs:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iPrSDi7pIyeI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 27\n",
        "# Equivalent to arr2 * arr2\n",
        "\n",
        "np.square(arr2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WiIyBmIWIyeM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 28\n",
        "# Equivalent to arr2 ** 0.5\n",
        "\n",
        "np.sqrt(arr2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7qLoodFAIyeO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 29\n",
        "# Absolute values\n",
        "\n",
        "mixed_arr = np.array([-1,3,2,-3,5,4,3,-6,-4,5])\n",
        "np.abs(mixed_arr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qJDcp6BWIyeT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 30\n",
        "# Signs\n",
        "\n",
        "np.sign(mixed_arr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FPwlZHtbIyeX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 31\n",
        "# Comparing two arrays to get elementwise maxima\n",
        "\n",
        "zeros_arr = np.zeros(10)\n",
        "np.maximum(mixed_arr, zeros_arr)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X0yUqiIpIyea",
        "colab_type": "text"
      },
      "source": [
        "This is only a small sample of the many ufuncs that are out there - for more ufuncs, check out the documentation: https://docs.scipy.org/doc/numpy/reference/ufuncs.html#available-ufuncs"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cp99BY5GIyeb",
        "colab_type": "text"
      },
      "source": [
        "### Array methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oEx_PUs_Iyec",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 32\n",
        "\n",
        "my_arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5i07L3TqIyeg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 33\n",
        "# Sum of all elements\n",
        "\n",
        "my_arr.sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0kSm0dj-Iyej",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 34\n",
        "# Arithmetic mean\n",
        "\n",
        "my_arr.mean()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9iZSts2lIyeo",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 35\n",
        "# Standard deviation (optionally, adjust degrees of freedom used in calculation via ddof parameter)\n",
        "\n",
        "my_arr.std()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tKme_-njIyew",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 36\n",
        "# Variance (ddof adjustable)\n",
        "\n",
        "my_arr.var()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u54Io8pzIye3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 37\n",
        "# Maximum of all elements\n",
        "\n",
        "my_arr.max()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2_Tuqf9ZIyfD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 38\n",
        "# Minimum of all elements\n",
        "\n",
        "my_arr.min()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8QBuK2ngIyfH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 39\n",
        "# What if I want the maximum value in each row?\n",
        "\n",
        "my_arr.max(axis=1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B3TGQzHfIyfM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 40\n",
        "# Finding the indices of the maximum element of the array\n",
        "\n",
        "my_arr.argmax()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FpH3TSZYIyfR",
        "colab_type": "text"
      },
      "source": [
        "How do we interpret this result?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5WPdSuvpIyfY",
        "colab_type": "text"
      },
      "source": [
        "For more, check out the \"Methods\" subsection here: https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4-Hc3JDNIyfZ",
        "colab_type": "text"
      },
      "source": [
        "### Masking and more with booleans (True/False values)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NGput01dIyfa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 42\n",
        "# Creating an array of the top 40 U.S. cities by population\n",
        "\n",
        "top40_arr = np.array(['New York', 'Los Angeles', 'Chicago', 'Houston', 'Philadelphia', 'Phoenix', 'San Antonio', 'San Diego',\n",
        "         'Dallas', 'San Jose', 'Austin', 'Jacksonville', 'San Francisco', 'Indianapolis', 'Columbus', 'Fort Worth',\n",
        "         'Charlotte', 'Seattle', 'Denver', 'El Paso', 'Detroit', 'Washington', 'Boston', 'Memphis', 'Nashville', 'Portland',\n",
        "         'Oklahoma City', 'Las Vegas', 'Baltimore', 'Louisville', 'Milwaukee', 'Albuquerque', 'Tucson', 'Fresno', 'Sacramento',\n",
        "         'Kansas City', 'Long Beach', 'Mesa', 'Atlanta', 'Colorado Springs'])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CM8SLfx9Iyfc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 43\n",
        "# Which cities start with a letter in the second half of the alphabet?\n",
        "\n",
        "top40_arr >= 'N'"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0niWycOcIyff",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 44\n",
        "# Creating a second array of the same length\n",
        "\n",
        "new_arr = np.random.randn(40,2)\n",
        "new_arr"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "R6Qg6shdIyfi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 45\n",
        "# Using the boolean array as a mask for a second array\n",
        "\n",
        "mask = top40_arr>='N'\n",
        "new_arr[mask]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t5-SFktbIyfp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 46\n",
        "# Compound masks also work\n",
        "\n",
        "mask2 = (top40_arr>='N')&(top40_arr<='R')\n",
        "new_arr[mask2]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HvO0uzi7Iyfu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 47\n",
        "# Checking if there are any top-40 cities that start with a letter after \"X\"\n",
        "\n",
        "maskP = top40_arr>'X'\n",
        "maskP.any()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zEvmZEuFIyf1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 48\n",
        "# Checking if all top-40 cities in the array are in title case\n",
        "\n",
        "maskCapit = np.chararray.istitle(top40_arr)\n",
        "maskCapit.all()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BBU3dq1kIyf4",
        "colab_type": "text"
      },
      "source": [
        "### Some matrix operations (just the tip of the iceberg)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HjutLi6SIyf5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 49\n",
        "# Creating a matrix using an ndarray object\n",
        "\n",
        "mat = np.array([[2,5],\n",
        "                [6,7]])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qa_l_KiLIyf8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 50\n",
        "# Tranposing the matrix\n",
        "\n",
        "mat.T"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KB_qIteZIyf_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 51\n",
        "# Calculating X'X where X' is the transpose of X\n",
        "\n",
        "matT = mat.T\n",
        "matT.dot(mat)    # you can also use \"np.dot(matT,mat)\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b2hqAYqdIygF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 52\n",
        "# 2x2 identity matrix\n",
        "\n",
        "np.identity(2)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RZ3UWsBjIygH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 53\n",
        "# Finding the inverse of the matrix\n",
        "\n",
        "np.linalg.inv(mat)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oxBmZaN_IygL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 54\n",
        "# Finding the determinant of the matrix\n",
        "\n",
        "np.linalg.det(mat)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rv2fJk5wIygP",
        "colab_type": "text"
      },
      "source": [
        "Other linear algebra methods can be found here: https://docs.scipy.org/doc/numpy/reference/routines.linalg.html"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QBadYUPgIygQ",
        "colab_type": "text"
      },
      "source": [
        "**Exercise 1:**\n",
        "\n",
        "The Iris dataset is a well-known data source for teaching machine learning classification algorithms. There are four non-class attributes: sepal length (cm), sepal width (cm), petal length (cm), and petal width (cm). Each row corresponds to measurements from one iris plant.\n",
        "Using the provided array, calculate the minimum, maximum, mean, and standard deviation for each attribute (you can assume the order of attributes above reflects the order of the columns in the array). Create a new array that excludes outliers (for this exercise, flowers with a value more than 2 standard deviations away from the mean for any of the attributes).\n",
        "\n",
        "*Hint*: The axis can be specified for the `arr.any()` and `arr.all()` methods."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lQyL7AxtIygQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 55\n",
        "\n",
        "from sklearn import datasets\n",
        "\n",
        "iris_data = datasets.load_iris()\n",
        "iris_arr = iris_data.data"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wCWBEcPHIygT",
        "colab_type": "text"
      },
      "source": [
        "**Answer 1:**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZwhGd-xsIygU",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 56\n",
        "\n",
        "## ENTER CODE HERE\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IMyGB051N3j2",
        "colab_type": "text"
      },
      "source": [
        "## Working with Pandas"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "16yCxfvaOF1o",
        "colab_type": "text"
      },
      "source": [
        "In this section, we'll be using data from the UNHCR (UN Refugee Agency). The UNHCR has collected and published data on refugees, asylum seekers, and other \"populations of concern\" from 1951-2016; more information can be found at http://popstats.unhcr.org/en/overview."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z5-EYVKKIyga",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 57\n",
        "\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Gf7dSHbcOvcu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from google.colab import files\n",
        "files.upload()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O1S7X-HGPRhQ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 58\n",
        "# Reading in the first table\n",
        "\n",
        "persons = pd.read_csv('unhcr_popstats_export_persons_of_concern_all_data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B2-6-LLXPmX5",
        "colab_type": "text"
      },
      "source": [
        "Let's look at the data frame to see what's going on."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JpAVxxr2PiKP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 59\n",
        "# Showing top 5 rows\n",
        "\n",
        "persons.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yhtdxdT5PidP",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 60\n",
        "# Showing last 5 rows\n",
        "\n",
        "persons.tail()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mgmOoGP2TkfN",
        "colab_type": "text"
      },
      "source": [
        "So we see two issues - one is that the header hasn't been assigned properly, and the other is that we have asterisks which we'd like to replace with NaN's (null values).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FdoAXOQ4Pisy",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 61\n",
        "# Let's get summary information\n",
        "\n",
        "persons.info()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BBxabxVQPi2j",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 62\n",
        "# Re-read in the data\n",
        "\n",
        "persons = pd.read_csv('unhcr_popstats_export_persons_of_concern_all_data.csv', header=3, na_values = '*')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qzgUkC_bTgFp",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 63\n",
        "# Checking if we resolved the issues\n",
        "\n",
        "persons.tail()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XPQMQA2vTgUH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 64\n",
        "\n",
        "persons.info()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NB-wt7rBUhEL",
        "colab_type": "text"
      },
      "source": [
        "There are a lot of parameters you can adjust when reading in a CSV file; see the documentation for details: https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html\n",
        "\n",
        "Some of the column names are long - let's replace them for convenience of analysis."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ETVT2kxVTgeT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 65\n",
        "\n",
        "per_renamed = persons.rename(index=str, columns ={'Country / territory of asylum/residence': 'Residence',\n",
        "                                    'Refugees (incl. refugee-like situations)': 'Refugees',\n",
        "                                    'Asylum-seekers (pending cases)': 'Asylum-seekers',\n",
        "                                    'Internally displaced persons (IDPs)': 'IDPs'})\n",
        "per_renamed.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rRXDXmW7Uw3B",
        "colab_type": "text"
      },
      "source": [
        "How do we look at specific columns?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ek9tMIGITgrl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 66\n",
        "\n",
        "per_renamed['Origin']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RyoG3KwKUrn_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 67\n",
        "# Count unique values in \"Origin\" column (we'll count \"Various/Unknown\" as one country)\n",
        "\n",
        "per_renamed['Origin'].nunique()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1FJTnOKbVMWE",
        "colab_type": "text"
      },
      "source": [
        "Let's say we want to focus on persons from Somalia."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DxV9WdiVUsq_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 68\n",
        "\n",
        "somali = per_renamed[per_renamed['Origin'] == 'Somalia']\n",
        "somali"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nLRQItSIqH_k",
        "colab_type": "text"
      },
      "source": [
        "Now, let's say we want to be more specific and focus on Somalis who have come to the U.S. between 2000-2016."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wp_Mqhf3UsoI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 69\n",
        "\n",
        "somali_us = somali[(somali['Residence'] == 'United States of America') & (somali['Year'] >= 2000) & (somali['Year'] <= 2016)]\n",
        "somali_us"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b5mNoPv7qXk6",
        "colab_type": "text"
      },
      "source": [
        "Now, let's go back to the larger data frame, per_renamed."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MkMgAoZ7Usld",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 70\n",
        "\n",
        "per_renamed.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rxcCjsZ6qjdO",
        "colab_type": "text"
      },
      "source": [
        "You may have noticed the index on the leftmost side of the data frame. If we don't assign the index when we read in the data, pandas will automatically assign the row number as the index. But for faster and more convenient look-ups, you will often want to assign one of your columns as the index."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Da_d0GcmUsi5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 71\n",
        "# Let's set \"Origin\" as our new index and sort the countries alphabetically\n",
        "\n",
        "origin_df = per_renamed.set_index('Origin').sort_index()\n",
        "origin_df"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tal7NT5bqzje",
        "colab_type": "text"
      },
      "source": [
        "This is convenient, because now we can more quickly access certain rows and columns, like so:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M-URBL3pUsd3",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 72\n",
        "# Choosing rows corresponding to the slice between Somalia and Sudan (inclusive), and columns between Year and Asylum-seekers (inclusive)\n",
        "\n",
        "origin_df.loc['Somalia':'Sudan', 'Year':'Asylum-seekers']"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6LA6BVwfq6Au",
        "colab_type": "text"
      },
      "source": [
        "If you wanted to locate data by row/column numbers, you could use `.iloc` (integer-based location) instead of `.loc` (label-based location)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zVnRZypvUrlJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 73\n",
        "\n",
        "origin_df.iloc[0, 0:4]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fPj_bN8srHOs",
        "colab_type": "text"
      },
      "source": [
        "Now, as we've alluded to previously, there are a lot of null values in this table."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SPsFra49Urim",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 74\n",
        "# Quick way to check if there are any null values in each column\n",
        "\n",
        "pd.isnull(origin_df).any()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fb-nBcFkUrf9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 75\n",
        "# Are there columns with ONLY null values?\n",
        "\n",
        "pd.isnull(origin_df).all()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V8WxdtusUrc-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 76\n",
        "# Which rows have null values?\n",
        "\n",
        "origin_df[pd.isnull(origin_df).any(axis=1)].head(10)    # only want to look at the top 10 rows to save space"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vpV2lXo8Urap",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 77\n",
        "# Which rows do NOT have null values?\n",
        "\n",
        "origin_df[pd.notnull(origin_df).all(axis=1)].head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "85Jr_HPZreQM",
        "colab_type": "text"
      },
      "source": [
        "There are several ways you might want to handle missing values, depending on your data and application. One way is to simply drop rows or columns with null values:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "stBr96oPUrWO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 78\n",
        "# Dropping rows with NaN's in \"Refugees\" or \"IDPs\" columns\n",
        "\n",
        "origin_df_nonnull = origin_df.dropna(axis=0, how='any', subset=['Refugees', 'IDPs'])\n",
        "origin_df_nonnull.head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hGBB4gSNrk8a",
        "colab_type": "text"
      },
      "source": [
        "However, sometimes dropping columns isn't feasible or desirable. You may instead want to impute missing values, replacing them with values that make sense in the context. \n",
        "\n",
        "Let's say we want to replace each NaN with the average value in its respective column."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lvD2pjQmUrSn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 79\n",
        "# First, calculate the mean for each column (this may take a few seconds)\n",
        "\n",
        "means = origin_df.mean(axis=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pXxOPcMiUrNN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 80\n",
        "\n",
        "means"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "--wCoD9UUrKu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 81\n",
        "# Now, replace the NaN's\n",
        "\n",
        "origin_df.fillna(means).head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pu4gJiYUsU00",
        "colab_type": "text"
      },
      "source": [
        "Alternatively, you might want to replace null values with zeros."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zekGP8e7UrID",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 82\n",
        "\n",
        "origin_df.fillna(0).head(10)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tIp2FaDGsceP",
        "colab_type": "text"
      },
      "source": [
        "Let's look at some operations we can do in pandas."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yn0J39mWUrFi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 83\n",
        "# Adding a new column representing the sum of \"Refugees\" and \"Returned refugees\" to per_renamed, the non-index-specified\n",
        "# dataframe (treating NaNs as zeros for the calculation)\n",
        "\n",
        "per_renamed['All refugees'] = per_renamed['Refugees'] + per_renamed['Returned refugees'].fillna(0)\n",
        "per_renamed"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oA91jQGnsnOY",
        "colab_type": "text"
      },
      "source": [
        "What if we want to look at the total number of refugees (not Returned) from each country in \"Origin\" by year? The easiest way to do this is by grouping the data."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZgfsMP1RUrCg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 84\n",
        "# Grouping data by Origin and Year, then calculating totals\n",
        "\n",
        "grouped_total = per_renamed.groupby(['Origin','Year'])['Refugees'].sum()\n",
        "grouped_total"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AXhMv8dgs2nt",
        "colab_type": "text"
      },
      "source": [
        "What if we want to find out which country \"produced\" (for lack of a better word) the most refugees, by year?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ChAk-8rEUq_9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 85\n",
        "# First, group and sum over each group\n",
        "\n",
        "grouped_new = per_renamed.groupby(['Year', 'Origin'])['Refugees'].sum()\n",
        "grouped_new"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CA5RZvC-Uq3y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Solution to Exercise 1\n",
        "iris_arr.shape  \n",
        "## CODE CELL 57\n",
        "\n",
        "iris_arr.min(axis=0)    # minimum values\n",
        "## CODE CELL 58\n",
        "\n",
        "iris_arr.max(axis=0)    # maximum values\n",
        "\n",
        "## CODE CELL 59\n",
        "\n",
        "mean_vals = iris_arr.mean(axis=0)    # mean values\n",
        "mean_vals"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dASdDq8hUqzm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 60\n",
        "\n",
        "std_vals = iris_arr.std(axis=0)    # standard deviations\n",
        "std_vals"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LBPAiQOhw-4r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 61\n",
        "# To create a mask against outliers, first get boolean array differentiating outliers vs. non-outliers\n",
        "\n",
        "notOutlier = (iris_arr <= mean_vals+2*std_vals)&(iris_arr >= mean_vals-2*std_vals)\n",
        "notOutlier"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z1DZOYY1xCFE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 62\n",
        "# To use the mask, we need to flatten the array to 1D\n",
        "\n",
        "compressed = notOutlier.all(axis=1)\n",
        "compressed"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QfduwG8MxGXg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## CODE CELL 63\n",
        "# Finally, use the mask to exclude rows with outliers\n",
        "\n",
        "iris_arr[compressed]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "collapsed": true,
        "id": "gYU4aZjgIygf",
        "colab_type": "text"
      },
      "source": [
        "*Reference*:\n",
        "\n",
        "The following material was consulted during development of this notebook, which loosely follows the structure of McKinney's chapter on NumPy Basics:\n",
        "\n",
        "W. McKinney, \"Chapter 4 - Numpy Basics: Arrays and Vectorized Computation,\" in *Python for Data Analysis : Data Wrangling with Pandas, Numpy, and IPython.* Sebastopol, CA: O'Reilly Media, 2012. [Online] Available: EBSCOhost, https://search-ebscohost-com.proxy.libraries.rutgers.edu/login.aspx?direct=true&db=nlebk&AN=495822&site=eds-live."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FYVyFkYQIygg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}